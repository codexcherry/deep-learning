import numpy as np

def perceptron_predict(inputs, weights, bias):
    """Predict output using perceptron"""
    weighted_sum = np.dot(inputs, weights) + bias
    return 1 if weighted_sum >= 0 else 0

# Training data: [favorite_hero, favorite_heroine, good_climate], expected_output
dataset = [
    ([1, 1, 1], 1),  # All conditions favorable
    ([1, 1, 0], 1),   # Hero and heroine favorable
    ([1, 0, 1], 0),   # Hero and climate favorable
    ([1, 0, 0], 0),   # Only hero favorable
    ([0, 1, 1], 1),   # Heroine and climate favorable
    ([0, 1, 0], 0),   # Only heroine favorable
    ([0, 0, 1], 0),   # Only climate favorable
    ([0, 0, 0], 0)    # No conditions favorable
]

weights = np.array([0.2, 0.4, 0.2])
bias = -0.5
threshold = 8  # Not used directly in perceptron logic

print("Inputs\t\tPredicted\tExpected\tDecision")
correct = 0

for inputs, expected in dataset:
    inputs_arr = np.array(inputs)
    predicted = perceptron_predict(inputs_arr, weights, bias)
    correct += (predicted == expected)
    decision = "Go to movie" if predicted == 1 else "Don't go"
    print(f"{inputs}\t{predicted}\t\t{expected}\t\t{decision}")

accuracy = (correct / len(dataset)) * 100
print(f"\nModel Accuracy: {accuracy:.2f}%")
