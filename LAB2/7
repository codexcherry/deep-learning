import numpy as np

def apply_learning_rule(rule_name, input_pattern, weights, target=None, learning_rate=0.1):
    if rule_name == "hebbian":
        return weights + np.outer(input_pattern, input_pattern)
    
    elif rule_name == "perceptron":
        prediction = np.dot(weights, input_pattern)
        return weights + learning_rate * (target - prediction) * input_pattern
    
    elif rule_name == "delta":
        prediction = np.dot(weights, input_pattern)
        return weights + learning_rate * np.outer((target - prediction), input_pattern)
    
    elif rule_name == "correlation":
        return weights + np.outer(input_pattern, input_pattern)
    
    elif rule_name == "outstar":
        return weights + learning_rate * np.outer(input_pattern, input_pattern)

# Initialize parameters
input_size = 3
input_pattern = np.array([0.2, 0.5, 0.8])
target = 1
learning_rate = 0.1

# Create and update all weights in a loop
rules = ["hebbian", "perceptron", "delta", "correlation", "outstar"]
results = {}

for rule in rules:
    # Initialize weights (1D for perceptron, 2D for others)
    weights = np.random.rand(input_size) if rule == "perceptron" else np.random.rand(input_size, input_size)
    
    # Store initial and updated weights
    results[rule] = {
        "initial": weights.copy(),
        "updated": apply_learning_rule(rule, input_pattern, weights, target, learning_rate)
    }

# Display results
for rule, data in results.items():
    print(f"\n{rule.capitalize()} Rule:")
    print("Initial weights:\n", data["initial"])
    print("Updated weights:\n", data["updated"])
